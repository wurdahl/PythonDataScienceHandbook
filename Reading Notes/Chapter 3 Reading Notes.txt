Chapter 3.01 Introducing Pandas Objects
	The indicies for pandas series are explicit instead of implicit like NumPy.

	DataFrames are 2 dimensional versions of series. There are explict column names and explict row indicies.
	A column in a dataFrame is a pandas series or dictionary.

	index objects are immutable arrays.
		They cannot be modified in the normal ways ind[x] = value.
		& - intersection of index objects
		| - union of index objects
		^ - symmetric difference

Chapter 3.02 Data Indexing and Selection
	
	In pandas series, when slicing the python normal indicies are used (0,1,2,3...).
	use the .loc attribute to refer to the pandas indicies.
	use the .iloc attribute to refer to the python indicies.
	ix is equivalent to the the standard []-based indexing.

	DataFrames info:
		we can use attribute-style access with column names that are strings

		Like with the Series objects discussed earlier, this dictionary-style syntax can also be used to modify the object, in this case adding a new column:

		data['density'] = data['pop'] / data['area']

	to examine the underlying data, use data.values

	Transpose data: data.T

Chapter 3.03 Operations in Pandas
	
	If we apply a NumPy ufunc on either of these objects, the 
	result will be another Pandas object with the indices preserved

	For binary operations on two series or dataframe objects, Pandas will align indicies in the process of performing the operation.

	the resulting array contains the union of indicies of the two input arrays.

	Any item for which one of the other does not an entry is marked with NaN.

	If you don't want to use NaN, the fill values can be modified using the appropriate object methods:
		A.add(B, fill_value=0)

	Similar alignment takes place on both columns and indices when performing operations on DataFrames.

	The indicies in the result are sorted.

	For dataFrames, you can specify the fill_value by using the object methods.

	subtraction is applied automatically row-wise, if you want it column-wise, you can use axis:
		
	df.subtract(df['R'], axis=0)


Chapter 3.04 Missing Values

	Pandas chose to use sentinesl for missing data, using two already-existing Python null values:
		None - cannot be used in any arbitrary NumPy Array, but can be used for object arrays.
	
	