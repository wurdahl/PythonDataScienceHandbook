Chapter 2.01 Understanding Data Types
	Python is dynamically typed

	A Python integer is more than just an integer
		every python object is simply a cleverly-disguised C structure
		
		a variable containing an integer is actually a pointer to a compund C structure

	A Python List is More Than Just a List
		you can create heterogenous lists with multiple types contained

		each element of a list is a compleet python object
		
		"At the implementation level, the array essentially contains a single pointer to one
		contiguous block of data. The Python list, on the other hand, contains a pointer to
		a block of pointers, each of which in turn points to a full Python object"

	Fixed-Type Arrays in Python
		built in array module - create dense arrays of a uniform type
		
		ndarry of NumPy - adds effecient operatons on that data
			to explicitly set data type, use dtype keyword
			can be explicitly multi-dimensional

	Creating Arays from Scratch
		np.zeroes(number of zeroes)
		np.ones(number of ones)
		np.full( (row, column), number to fill array with)
		np.arange(start, end, step)
		np.linspace(start, end, number of subdivisons)
		np.random.random((row, col)) fills an array of size (x,y) with random numbers between 0 and 1
		np.random.normal(0,1, (3,3))
			# Create a 3x3 array of normally distributed random values
			# with mean 0 and standard deviation 1
		np.random.randint(0,10, (3,3))
			# Create a 3x3 array of random integers in the interval [0, 10)
		np.eye(x)
			identity matrix with size x
		np.empty(3)
			# Create an uninitialized array of three integers
			# The values will be whatever happens to already exist at that memory location
	
	NumPy Standard Data Types
		| Data type	    | Description |
		|---------------|-------------|
		| ``bool_``     | Boolean (True or False) stored as a byte |
		| ``int_``      | Default integer type (same as C ``long``; normally either ``int64`` or ``int32``)| 
		| ``intc``      | Identical to C ``int`` (normally ``int32`` or ``int64``)| 
		| ``intp``      | Integer used for indexing (same as C ``ssize_t``; normally either ``int32`` or ``int64``)| 
		| ``int8``      | Byte (-128 to 127)| 
		| ``int16``     | Integer (-32768 to 32767)|
		| ``int32``     | Integer (-2147483648 to 2147483647)|
		| ``int64``     | Integer (-9223372036854775808 to 9223372036854775807)| 
		| ``uint8``     | Unsigned integer (0 to 255)| 
		| ``uint16``    | Unsigned integer (0 to 65535)| 
		| ``uint32``    | Unsigned integer (0 to 4294967295)| 
		| ``uint64``    | Unsigned integer (0 to 18446744073709551615)| 
		| ``float_``    | Shorthand for ``float64``.| 
		| ``float16``   | Half precision float: sign bit, 5 bits exponent, 10 bits mantissa| 
		| ``float32``   | Single precision float: sign bit, 8 bits exponent, 23 bits mantissa| 
		| ``float64``   | Double precision float: sign bit, 11 bits exponent, 52 bits mantissa| 
		| ``complex_``  | Shorthand for ``complex128``.| 
		| ``complex64`` | Complex number, represented by two 32-bit floats| 
		| ``complex128``| Complex number, represented by two 64-bit floats| 

Chapter 2.02 The Basics of NumPy Arrays
	
	NumPy Array Attributes
		ndim - number of dimensions
		shape - size of each dimension
		size - total size of the array
		dtype - data type of the array
		itemsize - lists the size in bytes of each array element, if the smae will return one number (I believe)
		nbytes - lists the total size in bytes of the array

	Array Indexing: Accesing Single Elements
		
		one-dimensional array - specify the desired index in square brackets
		
		In a multi-dimensional array, items can be accessed using a comma-separated tuple of indices:
			array[x,y]
			
		values can also be modified using the index notation;
			array[x,y] = 5
		
		NumPy arrays have a fixed type, so values will be truncated and cast into the proper type
	
	Array Slicing: Accessing Subarrays
		
		Single dimension:

			if x is a lsit:
				x[:5] - first five elements
				x[5:] - elements after index 5
				x[4:7] - list starting at element 4 going to up to 7 exclusive
				x[::2] -  every other element
				x[1::2] - every other element startign at 1
				x[::-1] - reverse order of array
				x[5::-1] - reversed array starting at index 5

		Multi-dimensional subarrays:

			if x2 is a 2 dimensional array:
				x2[:2, :3] - first two rows and first three columns
				x2[:3, ::2] - first three rows and every other column
				x2[::-1,::-1] - both rows and columns are reversed order
			
			Accessing array rows and columns
				x2[:,0] - first column of x2
				x2[0, :] - first row of x2 (can be written as  x2[0])

	Subarrays as no-copy views
		array slices is that they return views rather than copies of the array data.
		This is one area in which NumPy array slicing differs from Python list slicing:
		in lists, slices will be copies.
			
		If you make a change to the subarray, you will change the original array.

	Creating Copies of Arrays
		Use the .copy method to copy a subarray. This copy will not affect the original.

	Reshaping of Arrays
		use the .reshape() method to reshape an array to a new desired shape
		
		for example:
			np.arange(1,10).reshape(3,3)) will create [[1,2,3],[4,5,6],[7,8,9]]

		for .reshape to work the size of the first array and the reshapened array must be the same.

		where possible, reshape will use a no-copy view of the initial array.

		if x = [1,2,3]:
			make a row vector:
				x.reshape((1,3)) will make [[1,2,3]]
				x[np.newaxis,:] will mke [[1,2,3]]
			make a column vector:
				x.reshape((3,1)) -> [[1],[2],[3]]
				x[:, np.newaxis] -> [[1],[2],[3]]

	Concatenation of Arrays
		
		concatenation is primarily done with np.concatenate, np.vstack, and np.hstack

		np.concatenate take a tuple or a list of arrays as its first argument
			you can concatenate as many arrays as you wish
	
		concatenate along first axis:
			np.concatenate([grid,grid])
		
		concatenate along second axis:
			np.concatenate([grid,grid], axis=1)


		np.vstack - vertical stack
		np.hstack - horizontal stack
		np.dstack - stack the arrays along the third axis

	Splitting of Arrays
		
		splitting is the opposite of concatenation

		functions:
			np.split(array, [split points])
			np.hsplit(array, [split points])
			np.vsplit(array, [split points])
			np.dsplit(array, [split points]) - third axis
		
		n amount of split points yield n+1 arrays returned

Chapter 2.03 computation on Arrays- Ufuncs

	Vectorized operations in NumPy are implemented via ufuncs, whose main purpose is to quickly
	execute repeated operations on values in NumPy arrays.

	Ufuncs exist in two flavors: unary ufuncs, which operate on a single input, and binary ufuncs, which operate on two inputs.

	There are specialized log and exponent functions for small numbers:
		np.expm1()
		np.log1p()

	for ufuncs, you can specify where the output should be stored by usin ght eout augment to the function:
		x = np.arange(5)
		y = np.empty(5)
		np.multiply(x, 10, out=y)

	the reduce function can be used to reduce an array with a specfiic function like add.
	If you want to store all intermediate values, you can use accumulate.

	Any ufunc can compute the output of all pairs of two different inputs using the outer method.

Chapter 2.04 Computation on Arrays - Aggreagtes

	Aggreagte functions help you see and process the data overall by computing summary statistics.	

	Aggregation functions take an additional argument specifying the axis along which the aggregate is computed.
	For example, we can find the minimum value within each column by specifying axis=0
	and the minimum value within each row by specifying axis=1

	The axis keyword specifies the dimension of the array that will be collapsed,
	rather than the dimension that will be returned. 

Chapter 2.05 Computation on Arrays - Broadcasting
	
	Broadcasting is simply a set of rules for applying binary ufuncs (e.g., addition, subtraction, multiplication, etc.)
	on arrays of different sizes.

	Broadcasting in NumPy follows a strict set of rules to determine the interaction between the two arrays:

		Rule 1: If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is padded with ones on its leading (left) side.
		Rule 2: If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape.
		Rule 3: If in any dimension the sizes disagree and neither is equal to 1, an error is raised.

	If right-side padding is what you'd like, you can do this explicitly by reshaping the array
